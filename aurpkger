#!/usr/bin/sh

# Install and manage AUR packages

alias echo='echo -e'

# Basic info about the program, easily changeable
readonly PROGRAM_NAME="$(basename $0)"
readonly VERSION="0.1.3"

readonly CACHE_LOCATION="${HOME}/.cache/${PROGRAM_NAME}"
readonly AUR_PACKAGE_LIST="${CACHE_LOCATION}/package_list"

# Colours -- they make things easier to distinguish
readonly LIGHT_RED='\e[1;31m'
readonly BLUE='\e[1m\e[0;36m'
readonly RESET_CLR='\e[0m'
readonly BOLD='\e[1m'
readonly ERROR="${BOLD}${LIGHT_RED}error:${RESET_CLR}"
readonly WARNING="${LIGHT_RED}warning:${RESET_CLR}"

###
# Globals:
#   PROGRAM_NAME
#   VERSION
# Arguments:
#   none
###
display_help_message() {
cat <<END_OF_HELP
${PROGRAM_NAME} version ${VERSION}
Usage:  ${PROGRAM_NAME} <operation> [...]
Operations:
    ${PROGRAM_NAME} -h
    ${PROGRAM_NAME} install   <package(s)>     | pacman -S
    ${PROGRAM_NAME} search    <package(s)>     | pacman -Ss
    ${PROGRAM_NAME} update                     | pacman -Sy
END_OF_HELP
}

###
# Globals:      ERROR
#               CACHE_LOCATION
#               AUR_PACKAGE_LIST
# Arguments:    none
# Returns:      0 on success, exits with 1 otherwise
###
initialization_and_sanitization() {
    if ! ping archlinux.org -c 1 &> /dev/null; then
        echo "${ERROR} https://aur.archlinux.org is unreachable"
        exit 1
    fi

    [[ -d ${CACHE_LOCATION} ]] || mkdir ${CACHE_LOCATION}
    [[ -f ${AUR_PACKAGE_LIST} ]] || update_aur_package_list &

    return 0
}

###
# Equivalent of pacman -Sy; sync with database
# Globals:      AUR_PACKAGE_LIST
# Arguments:    optionally, 'v' (verbose)
# Returns:      always 0
###
update_aur_package_list() {
    [[ $1 == "v" ]] && echo "==> Downloading list of AUR packages..."
    curl -o ${AUR_PACKAGE_LIST}.gz -L https://aur.archlinux.org/packages.gz &>/dev/null

    [[ $1 == "v" ]] && echo "==> Unzipping compressed file..."
    gunzip < ${AUR_PACKAGE_LIST}.gz > ${AUR_PACKAGE_LIST}

    [[ $1 == "v" ]] && echo "==> Removing compressed file..."
    rm -f ${AUR_PACKAGE_LIST}.gz

    [[ $1 == "v" ]] && echo "==> Removing comments from unzipped file..."
    sed '/^#/d' -i ${AUR_PACKAGE_LIST}

    return 0
}

###
# Perform something like pacman -Ss on argument
# Globals:      AUR_PACKAGE_LIST
#               BLUE
#               RESET_CLR
#               BOLD
# Argument:     package to search for
# Returns:      0 on success, 1 otherwise
###
search_package_in_aur() {
    declare results=$(grep "$1" ${AUR_PACKAGE_LIST})

    if [[ ! -z ${results} ]]; then
        while IFS= read -r pkg; do
            echo "${BLUE}aur/${RESET_CLR}${BOLD}${pkg}${RESET_CLR}"
        done <<< "${results}"
        return 0
    fi

    return 1
}

###
# Argument:     answer to be processed
# Returns:      0 on success, 1 otherwise
###
process_ans() {
    [[ $1 =~ "n" || $1 =~ "N" ]] && return 1
    return 0
}

###
# Argument:     package name
# Returns:      0 on success, 1 otherwise
###
check_valid_aur_package() {
    grep -w "^${1}$" ${AUR_PACKAGE_LIST} &> /dev/null && return 0
    return 1
}

###
# Basically pacman -S
# Globals:      AUR_PACKAGE_LIST
#               ERROR
#               WARNING
#               BOLD
#               RESET_CLR
#               CACHE_LOCATION
# Arguments:    package to be installed
# Returns:      0 on success, 1 otherwise
###
install_aur_package() {
    local pkg=$1
    local install_location=${CACHE_LOCATION}/${pkg}

    if ! check_valid_aur_package ${pkg}; then
        if ! pacman -Si ${pkg} &>/dev/null; then
            echo "${ERROR} target not found: '${pkg}'"
            return 1
        fi

        sudo pacman -S ${pkg} && return 0

        return 1
    fi

    trap "rm -rf ${install_location}; echo \"\n\n${ERROR} Aborted!\";
    exit 1" SIGTERM SIGINT SIGHUP

    echo "---> Downloading package '${pkg}'...\n"
    git clone https://aur.archlinux.org/${pkg}.git ${install_location} &>/dev/null

    cd ${install_location}

    echo -n "${BOLD}>>> Read PKGBUILD?${RESET_CLR} "
    echo -En '[Y\n] '
    read ans
    process_ans ${ans} && ${PAGER} PKGBUILD

    echo -n "${BOLD}>>> Build package?${RESET_CLR} "
    echo -En '[Y\n] '
    read ans
    process_ans ${ans} && makepkg --install --syncdeps --rmdeps && return 0

    # Change directory back, or else git will give a "fatal: unable to read
    # current working directory" error when installing multiple packages
    cd
    
    # Some cleanup if installation failed
    rm -rf ${install_location}
    return 1
}

main() {
    readonly OPERATION=$1

    initialization_and_sanitization &

    shift # remove subcommand
    # Process options
    case ${OPERATION} in
        -h)
            display_help_message
            ;;

        install)
            declare pkgs=$@

            [[ -z ${pkgs} ]] && echo "${ERROR} no package specified" && return 1
            
            shift
            for pkg in ${pkgs}; do
                install_aur_package ${pkg}
            done
            ;;

        search)
            declare pkgs=$@

            [[ -z ${pkgs} ]] && echo "${ERROR} no package specified" && return 1

            shift
            for pkg in $pkgs; do
                search_package_in_aur ${pkg}
            done
            ;;

        update)
            update_aur_package_list "v"
            ;;

        *)
            echo "${ERROR} no operation specified (use -h for help)"
            return 1
            ;;
    esac

    return 0
}

main $@
